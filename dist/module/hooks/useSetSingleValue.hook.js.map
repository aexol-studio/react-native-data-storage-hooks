{"version":3,"sources":["useSetSingleValue.hook.ts"],"names":["AsyncStorage","useState","useEffect","useGetWholeStorage","useSetSingleValue","key","initialValue","storedValue","setStoredValue","refreshValues","getStoredItem","item","getItem","value","JSON","parse","error","console","log","setValue","valueToStore","Function","setItem","stringify"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,kBAAR,QAAiC,SAAjC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,GAAD,EAAcC,YAAd,KAAoC;AACnE,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,EAA9C;AACA,QAAM,GAAGQ,aAAH,IAAoBN,kBAAkB,EAA5C;;AAEA,iBAAeO,aAAf,GAA+B;AAC7B,QAAI;AACFD,MAAAA,aAAa;AACb,YAAME,IAAI,GAAG,MAAMX,YAAY,CAACY,OAAb,CAAqBP,GAArB,CAAnB;AACA,YAAMQ,KAAK,GAAGF,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAH,GAAsBL,YAAxC;AACAE,MAAAA,cAAc,CAACK,KAAD,CAAd;AACD,KALD,CAKE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAEDd,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,aAAa,GADC,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMS,QAAQ,GAAG,MAAON,KAAP,IAAsB;AACrC,QAAI;AACF,YAAMO,YAAY,GAChBP,KAAK,YAAYQ,QAAjB,GAA4BR,KAAK,CAACN,WAAD,CAAjC,GAAiDM,KADnD;AAEAL,MAAAA,cAAc,CAACY,YAAD,CAAd;AACA,YAAMpB,YAAY,CAACsB,OAAb,CAAqBjB,GAArB,EAA0BS,IAAI,CAACS,SAAL,CAAeH,YAAf,CAA1B,CAAN;AACD,KALD,CAKE,OAAOJ,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GATD;;AAWA,SAAO,CAACT,WAAD,EAAcY,QAAd,CAAP;AACD,CAhCM","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport {useState, useEffect} from 'react';\r\nimport {useGetWholeStorage} from './index';\r\n\r\nexport const useSetSingleValue = (key: string, initialValue: any) => {\r\n  const [storedValue, setStoredValue] = useState();\r\n  const [, refreshValues] = useGetWholeStorage();\r\n\r\n  async function getStoredItem() {\r\n    try {\r\n      refreshValues();\r\n      const item = await AsyncStorage.getItem(key);\r\n      const value = item ? JSON.parse(item) : initialValue;\r\n      setStoredValue(value);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getStoredItem();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setValue = async (value: any) => {\r\n    try {\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      await AsyncStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};\r\n"]}