{"version":3,"sources":["useSetSingleValue.hook.ts"],"names":["AsyncStorage","useState","useEffect","useGetWholeStorage","useSetSingleValue","key","initialValue","storedValue","setStoredValue","refreshValues","getStoredItem","undefined","item","getItem","value","JSON","parse","error","console","setValue","valueToStore","Function","setItem","stringify","valueFromStorage"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,kBAAR,QAAiC,SAAjC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,GAD+B,EAE/BC,YAF+B,KAG5B;AACH,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,EAA9C;AACA,QAAM,GAAGQ,aAAH,IAAoBN,kBAAkB,EAA5C;;AAEA,iBAAeO,aAAf,GAA+B;AAC7B,QAAI;AACFD,MAAAA,aAAa;;AACb,UACEJ,GAAG,KAAK,EAAR,IACAA,GAAG,KAAKM,SADR,IAEAL,YAAY,KAAK,IAFjB,IAGAA,YAAY,KAAKK,SAJnB,EAKE;AACA;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMZ,YAAY,CAACa,OAAb,CAAqBR,GAArB,CAAnB;AACA,YAAMS,KAAK,GAAGF,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAH,GAAsBN,YAAxC;AACAE,MAAAA,cAAc,CAACM,KAAD,CAAd;AACD,KAbD,CAaE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;;AAEDf,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,aAAa,GADC,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMS,QAAQ,GAAG,MAAOL,KAAP,IAAwD;AACvE,QAAI;AACF,UAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKH,SAAhC,EAA2C;AACzC;AACD;;AACD,YAAMS,YAAY,GAChBN,KAAK,YAAYO,QAAjB,GAA4BP,KAAK,CAACP,WAAD,CAAjC,GAAiDO,KADnD;AAEA,YAAMd,YAAY,CAACsB,OAAb,CAAqBjB,GAArB,EAA0BU,IAAI,CAACQ,SAAL,CAAeH,YAAf,CAA1B,CAAN;AACA,YAAMI,gBAAgB,GAAG,MAAMxB,YAAY,CAACa,OAAb,CAAqBR,GAArB,CAA/B;;AACA,UAAImB,gBAAJ,EAAsB;AACpBhB,QAAAA,cAAc,CAACO,IAAI,CAACC,KAAL,CAAWQ,gBAAX,CAAD,CAAd;AACD,OAFD,MAEO;AACLN,QAAAA,OAAO,CAACD,KAAR,CAAc,yCAAd;AACD;AACF,KAbD,CAaE,OAAOA,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAjBD;;AAmBA,SAAO,CAACV,WAAD,EAAcY,QAAd,CAAP;AACD,CAnDM","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport {useState, useEffect} from 'react';\nimport {useGetWholeStorage} from './index';\n\nexport const useSetSingleValue = (\n  key: string,\n  initialValue: string | number | object | Array<any>,\n) => {\n  const [storedValue, setStoredValue] = useState();\n  const [, refreshValues] = useGetWholeStorage();\n\n  async function getStoredItem() {\n    try {\n      refreshValues();\n      if (\n        key === '' ||\n        key === undefined ||\n        initialValue === null ||\n        initialValue === undefined\n      ) {\n        return;\n      }\n      const item = await AsyncStorage.getItem(key);\n      const value = item ? JSON.parse(item) : initialValue;\n      setStoredValue(value);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  useEffect(() => {\n    getStoredItem();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const setValue = async (value: string | number | object | Array<any>) => {\n    try {\n      if (value === null || value === undefined) {\n        return;\n      }\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      await AsyncStorage.setItem(key, JSON.stringify(valueToStore));\n      const valueFromStorage = await AsyncStorage.getItem(key);\n      if (valueFromStorage) {\n        setStoredValue(JSON.parse(valueFromStorage));\n      } else {\n        console.error('Value could not be set to async storage');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n};\n"]}