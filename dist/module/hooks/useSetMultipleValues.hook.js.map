{"version":3,"sources":["useSetMultipleValues.hook.ts"],"names":["AsyncStorage","useState","useEffect","useGetWholeStorage","useSetMultipleValues","keyValuePairs","storedValues","setStoredValues","refreshValues","setValues","newValues","valuesToStore","Function","length","forEach","el","setItem","JSON","stringify","error","console"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,kBAAR,QAAiC,SAAjC;AAEA,OAAO,MAAMC,oBAAoB,GAC/BC,aADkC,IAE/B;AACH,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAE9C,EAF8C,CAAhD;AAGA,QAAM,GAAGO,aAAH,IAAoBL,kBAAkB,EAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,eAAe,CAACF,aAAD,CAAf,CADc,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMI,SAAS,GACbC,SADgB,IAEb;AACH,QAAI;AACFF,MAAAA,aAAa;AACb,YAAMG,aAAa,GACjBD,SAAS,YAAYE,QAArB,GAAgCF,SAAS,CAACJ,YAAD,CAAzC,GAA0DI,SAD5D;AAEAH,MAAAA,eAAe,CAACI,aAAD,CAAf;;AACA,UAAIA,aAAa,CAACE,MAAd,GAAuB,CAA3B,EAA8B;AAC5BF,QAAAA,aAAa,CAACG,OAAd,CAAsB,MAAOC,EAAP,IAA6B;AACjD,cAAIA,EAAE,CAACF,MAAH,GAAY,CAAZ,IAAiB,OAAOE,EAAE,CAAC,CAAD,CAAT,KAAiB,QAAtC,EAAgD;AAC9C,kBAAMf,YAAY,CAACgB,OAAb,CAAqBD,EAAE,CAAC,CAAD,CAAvB,EAA4BE,IAAI,CAACC,SAAL,CAAeH,EAAE,CAAC,CAAD,CAAjB,CAA5B,CAAN;AACD;AACF,SAJD;AAKD;AACF,KAZD,CAYE,OAAOI,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAlBD;;AAoBA,SAAO,CAACb,YAAD,EAAeG,SAAf,CAAP;AACD,CAlCM","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport {useState, useEffect} from 'react';\nimport {useGetWholeStorage} from './index';\n\nexport const useSetMultipleValues = (\n  keyValuePairs: [string, string | number | object | Array<any>][],\n) => {\n  const [storedValues, setStoredValues] = useState<\n    [string, string | number | object | Array<any>][]\n  >([]);\n  const [, refreshValues] = useGetWholeStorage();\n\n  useEffect(() => {\n    setStoredValues(keyValuePairs);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const setValues = (\n    newValues: [string, string | number | object | Array<any>][],\n  ) => {\n    try {\n      refreshValues();\n      const valuesToStore =\n        newValues instanceof Function ? newValues(storedValues) : newValues;\n      setStoredValues(valuesToStore);\n      if (valuesToStore.length > 0) {\n        valuesToStore.forEach(async (el: [string, any]) => {\n          if (el.length > 0 && typeof el[0] === 'string') {\n            await AsyncStorage.setItem(el[0], JSON.stringify(el[1]));\n          }\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValues, setValues] as const;\n};\n"]}